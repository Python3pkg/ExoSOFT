import tools
import sys
import os
import numpy as np
import pyfits as pf
import shutil


def main():
    fname = '/run/media/kmede/Data1/Todai_Work/Data/data_SMODT/SMODT2-HIP10321-3D-retro-MCMC-startAtBest-partialPost/combined-BIstripped-MCMCdata.fits'
    outFname = '/run/media/kmede/Data1/Todai_Work/Data/data_SMODT/SMODT2-HIP10321-3D-retro-MCMC-startAtBest-partialPost/M1M2-MCMCdata-subsampled.fits'
    (head,data) = tools.loadFits(fname)
    dataOut = data[:,0:2]
    print 'orig dataOut.shape '+repr(dataOut.shape)
    dataOutCropped = []
    i=0
    while i<10000:
        a = np.random.uniform(0,dataOut.shape[0])
        dataOutCropped.append(dataOut[int(a),:])
        i+=1
    dataOutCropped = np.array(dataOutCropped)
    print 'orig dataOutCropped.shape '+repr(dataOutCropped.shape)
    print repr(dataOutCropped)
    hdu = pf.PrimaryHDU(dataOutCropped)
    hdulist = pf.HDUList([hdu])
    header = hdulist[0].header
    hdulist.writeto(outFname)
    print 'output fits written to:\n'+outFname
    hdulist.close()

def chabrier2003Dist():
    outDir = '/run/media/kmede/Data1/Todai_Work/Data/data_SMODT/'
    writeIt = True
    outAry = []
    IMF = False
    if IMF:
        outFname =os.path.join(outDir,'chabrierDist-IMF.txt')
        if writeIt:
            f = open(outFname,'w')
        print '  range   Msun        IMF'
        f.write( '  range   Msun        IMF\n')
        transitions = [1.0]
    else:
        outFname =os.path.join(outDir,'chabrierDist-PDMF.txt')
        if writeIt:
            f = open(outFname,'w')
        print '  range   Msun        PDMF'
        f.write( '  range   Msun        PDMF\n')
        transitions = [1.0,3.47,18.20]
    for m in range(1,int(100*63.1)):
        m=m/100.0
        prntMasses = []
        for mass in transitions:
            prntMasses.append(mass)
            for i in range(-10,10):
                prntMasses.append(mass+(float(i)/100))
        r = 'none'
        if IMF==False:
            if m<1.0:
                r='m<1.0'
                d = (0.158/(m*np.log(10)))*np.exp((-(np.log10(m)-np.log10(0.079))**2)/(2.0*(0.69**2)))
                d1 = (0.068618528140713786/m)*np.exp((-(np.log10(m)+1.1023729087095586)**2)/0.9521999999999998)
                #print 'abs(d-d1) = '+str(abs(d-d1))
            elif m<3.47:
                r='m<3.47'
                d = ((4.4e-2)/np.log(10))*(m**(-5.37))
                d1 = 0.019108957203743077*(m**(-5.37))
                #print 'abs(d-d1) = '+str(abs(d-d1))
            elif m<18.20:
                r='m<18.20'
                d = ((1.5e-2)/np.log(10))*(m**(-4.53))
                d1 = 0.0065144172285487769*(m**(-4.53))
                #print 'abs(d-d1) = '+str(abs(d-d1))
            else:
                r='m>18.20'
                d = ((2.5e-4)/np.log(10))*(m**(-3.11))
                d1 = 0.00010857362047581295*(m**(-3.11))
                #print 'abs(d-d1) = '+str(abs(d-d1))
        else:
            if m<1.0:
                r='m<1.0'
                d = (0.158/(m*np.log(10)))*np.exp((-(np.log10(m)-np.log10(0.079))**2)/(2.0*(0.69**2)))
                d1 = (0.068618528140713786/m)*np.exp((-(np.log10(m)+1.1023729087095586)**2)/0.9521999999999998)
                #print 'abs(d-d1) = '+str(abs(d-d1))
            else:
                r='m>1.0'
                d = ((4.43e-2)/np.log(10))*(m**(-2.3))
                d1 = 0.019239245548314052*(m**(-2.3))
                #print 'abs(d-d1) = '+str(abs(d-d1))
        outAry.append([r,m,d])
        if m in prntMasses:
            print repr([r,m,d])
        if writeIt:
            f.write(repr(r)+'  '+str(m)+'  '+str(d)+'\n')
    if writeIt:
        f.close()
        
def TAeqnComparison():
    e=0.1
    for E in range(1,359):
        TA1 = np.degrees(np.arccos((np.cos(np.radians(E))-e)/(1.0-e*np.cos(np.radians(E)))))
        TA2 = np.degrees(2.0*np.arctan(np.sqrt((1.0+e)/(1.0-e))*np.tan(np.radians(E)/2.0)))
        TA3 = np.degrees(2.0*np.arctan2(np.sqrt(1.0+e)*np.tan(np.radians(E)/2.0),np.sqrt(1.0-e)))
        
        if abs(TA1-TA2)>0.00001:
            print "E = "+str(E)+"-> TA1 = "+str(TA1)+", TA2 = "+str(TA2)+", TA3 = "+str(TA3)

def TAcalcTester(ecc, T, Tc,P, epoch):
    """
    exact copy of the calculator in the orbit.cpp code translated into python
    to test any discontinuities.
    """
    thetaRV=0
    E=0
    M = (2.0*np.pi*(epoch-2.0*T+Tc))/(P*365.2422)
    Mbefore = (2.0*np.pi*(epoch-2.0*T+Tc))/(P*365.2422)
    M -= int(M/(2.0*np.pi))*(2.0*np.pi)#shift into [-360,360]
    if M<0:
        M+=2.0*np.pi;#shift into [0,360]
        print 'M<0'
    #print 'Mbefore '+str(int(Mbefore*(180.0/np.pi)))+"  int((Mbefore/(2.0*np.pi))  "+str(int(Mbefore/(2.0*np.pi))*(180.0/np.pi))+", Mafter "+str(int(M*(180.0/np.pi)))
    if (M!=0)and(M!=(2.0*np.pi)):
        Eprime = M+ecc*np.sin(M)+((ecc*ecc)/(2.0*M))*np.sin(2.0*M)
        newtonCount = 0;
        while (abs(E-Eprime)>1.0e-10)and(newtonCount<50):
            E = Eprime
            Eprime = E-((E-ecc*np.sin(E)-M)/(1.0-ecc*np.cos(E)))
            newtonCount +=1
        #double check it satisfies the original equation
        if abs((E-ecc*np.sin(E))-M)>1.0e-5:
            print "PROBLEM!! resulting E from Newton's loop isn't within error limit!!!"
            if True:
                print "M = "+str(M) 
                print "e = "+str(ecc)
                print "T = "+str(T)
                print "Tc = "+str(Tc)
                print "P = "+str(P)
                print "Eprime = "+str(Eprime)+"\n" 
        #print "E RV [deg] = "+str(E*(180.0/np.pi))
        thetaPrime = np.arccos((np.cos(E)-ecc)/(1.0-ecc*np.cos(E)))
        if E>np.pi:
            thetaPrime = 2.0*np.pi-thetaPrime
        thetaRV = thetaPrime
        #print "theta RV [deg] = "+str(thetaRV*(180.0/np.pi))
        print str(int(epoch-T))+" ,  "+str(int(M*(180.0/np.pi)))+" ,  "+str(int(E*(180.0/np.pi)))+" ,  "+str(int(thetaRV*(180.0/np.pi)))

def TAtesting():
    ecc=0.3
    T=2448900.0
    Tc=2448900.0
    P=12.0
    epochs = np.arange(T-(P/2.0)*365.2,T+(P*1.5)*365.2,100)
    for epoch in epochs:
        TAcalcTester(ecc, T, Tc,P, epoch)

def manyRealizationsTest(numRounds=100):
    postOnly=True
    #setup data filenames
    outDir= '/run/media/kmede/HOME/Dropbox/EclipseWorkspaceDB/SMODT/NewBEAT/settings_and_inputData/'
    jupOrBinary = 'Binary'
    specialDir = '/run/media/kmede/Data1/Todai_Work/Data/data_SMODT/'+jupOrBinary+'MultiTest-PDMFpriors-5millPerProc'
    newFolderBase = specialDir+'/run'
    
    if postOnly==False:
        os.mkdir(specialDir)
        dataFiles = []
        dataFiles.append(os.path.join(outDir,jupOrBinary+'MultiTest_RVdata.dat'))
        dataFiles.append(os.path.join(outDir,jupOrBinary+'MultiTest_DIdata.dat'))
        for round in range(1,numRounds+1):
            print '\n'+'*'*60+'\nStarting round #'+str(round)
            #delete previous copy of data files
            for fl in dataFiles:
                if os.path.exists(fl):
                    try:
                        #print 'Deleting file: '+os.path.basename(fl)
                        os.remove(fl) 
                    except:
                        print 'Failed to delete file: '+os.path.basename(fl)
            #make new data files
            tools.calcOrbit(outDir=outDir,outBaseName=jupOrBinary+'MultiTest_')
            print 'old ones deleted and new RV and DI data files made'
            #Run simulator with os system call
            print 'starting simulator'
            os.system("python NewBEAT.py "+jupOrBinary+"MultiTest_")
            print 'Finished running simulator'
            #move folder to special subdir with appended indices in the folder's name
            origFolder = '/run/media/kmede/Data1/Todai_Work/Data/data_SMODT/'+jupOrBinary+'MultiTest-5percent'
            newFolder = newFolderBase+str(round)
            shutil.move(origFolder, newFolder)
    print '\n\ndone simulations and starting analysis of results'
    ##analize results somehow?? make a summary of best fit and median results.  Make an overlay plot of mass1 posteriors?
    #make list of out MCMCdata files
    outDataFiles = []
    outResultsFiles = []
    m1DistFiles = []
    m2DistFiles = []
    for round in range(1,numRounds+1):
        nm = os.path.join(newFolderBase+str(round),"combined-BIstripped-MCMCdata.fits")
        if os.path.exists(nm):
            outDataFiles.append(nm)
            outResultsFiles.append(os.path.join(newFolderBase+str(round),"RESULTS.txt"))
            m1DistFiles.append(newFolderBase+str(round)+'/plotData/hist-MCMC-m1.dat')
            m2DistFiles.append(newFolderBase+str(round)+'/plotData/hist-MCMC-m2.dat')
    #plot stacked posterior for mass 1
    plotFilename = os.path.join(specialDir,'stackedPosteriors')
    tools.stackedPosteriorsPlotter(outDataFiles, plotFilename,paramsToPlot=[0],xLims=[[0.5,1.8]])
    #tools.stackedPosteriorsPlotter(outputDataFilenames, plotFilename,paramsToPlot=[],xLims=[])
    print 'Final stacked plot file written to:\n'+plotFilename
    os.system("epstopdf "+plotFilename+'.eps')
    #parse RESULTS.txt files
    m1Medians = []
    m1Bests = []
    m2Medians = []
    m2Bests = []
    m1Peaks = []
    m2Peaks = []
    for i in range(0,len(outResultsFiles)):
        fl = open(outResultsFiles[i])
        lines = fl.readlines()
        fl.close()
        try:
            for k in range(0,len(lines)):
                line = lines[k]
                if 'm1 [Msun] =' in line:
                    m1Bests.append(float(line.split('m1 [Msun] = ')[1]))
                elif 'm2 [Msun] =' in line:
                    if jupOrBinary=='Jupiter':
                        m2Bests.append(float(line.split('OR ')[1].split(' in')[0]))
                    else:
                        m2Bests.append(float(line.split(' = ')[1]))
                elif line=='m1 [Msun]\n':
                    l = lines[k+7]
                    m1Medians.append(float(l.split('->   ')[1].split('  +/-')[0]))
                elif line=='m2 [Msun]\n':
                    if jupOrBinary=='Jupiter':
                        l = lines[k+8]
                    else:
                        l = lines[k+7]
                    m2Medians.append(float(l.split('->   ')[1].split('  +/-')[0]))
        except:
            print 'problem with results file '+outResultsFiles[i]
        hst = np.loadtxt(m1DistFiles[i])
        mx = 0
        for j in range(len(hst)):
            if hst[j,1]>mx:
                mx=hst[j,1]
                ms = hst[j,0]
        m1Peaks.append(ms)
        hst = np.loadtxt(m2DistFiles[i])
        mx = 0
        for j in range(len(hst)):
            if hst[j,1]>mx:
                mx=hst[j,1]
                ms = hst[j,0]
        m2Peaks.append(ms)
            
    print '\nm1 medians [Msun] average = '+repr(np.mean(m1Medians))
    print 'm1 bests   [Msun] average = '+repr(np.mean(m1Bests))
    print 'm1 peaks   [Msun] average = '+repr(np.mean(m1Peaks))
    if jupOrBinary=='Jupiter':
        print '\nm2 medians [Mjup] average = '+repr(np.mean(m2Medians))
        print 'm2 bests   [Mjup] average = '+repr(np.mean(m2Bests))
        print 'm2 peaks   [Mjup] average = '+repr(np.mean(m2Peaks)*(1.9884e30/1.8983e27))
    else:
        print '\nm2 medians [Msun] average = '+repr(np.mean(m2Medians))
        print 'm2 bests   [Msun] average = '+repr(np.mean(m2Bests))
        print 'm2 peaks   [Msun] average = '+repr(np.mean(m2Peaks))
    

if __name__ == '__main__':
    #main()
    #chabrier2003Dist()
    #TAeqnComparison()
    manyRealizationsTest()